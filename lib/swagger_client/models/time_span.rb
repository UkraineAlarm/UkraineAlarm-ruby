=begin
#Ukraine Alert API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0
Contact: support@stfalcon.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.52
=end

require 'date'

module SwaggerClient
  class TimeSpan
    attr_accessor :ticks

    attr_accessor :days

    attr_accessor :hours

    attr_accessor :milliseconds

    attr_accessor :minutes

    attr_accessor :seconds

    attr_accessor :total_days

    attr_accessor :total_hours

    attr_accessor :total_milliseconds

    attr_accessor :total_minutes

    attr_accessor :total_seconds

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ticks' => :'ticks',
        :'days' => :'days',
        :'hours' => :'hours',
        :'milliseconds' => :'milliseconds',
        :'minutes' => :'minutes',
        :'seconds' => :'seconds',
        :'total_days' => :'totalDays',
        :'total_hours' => :'totalHours',
        :'total_milliseconds' => :'totalMilliseconds',
        :'total_minutes' => :'totalMinutes',
        :'total_seconds' => :'totalSeconds'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ticks' => :'Object',
        :'days' => :'Object',
        :'hours' => :'Object',
        :'milliseconds' => :'Object',
        :'minutes' => :'Object',
        :'seconds' => :'Object',
        :'total_days' => :'Object',
        :'total_hours' => :'Object',
        :'total_milliseconds' => :'Object',
        :'total_minutes' => :'Object',
        :'total_seconds' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::TimeSpan` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::TimeSpan`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ticks')
        self.ticks = attributes[:'ticks']
      end

      if attributes.key?(:'days')
        self.days = attributes[:'days']
      end

      if attributes.key?(:'hours')
        self.hours = attributes[:'hours']
      end

      if attributes.key?(:'milliseconds')
        self.milliseconds = attributes[:'milliseconds']
      end

      if attributes.key?(:'minutes')
        self.minutes = attributes[:'minutes']
      end

      if attributes.key?(:'seconds')
        self.seconds = attributes[:'seconds']
      end

      if attributes.key?(:'total_days')
        self.total_days = attributes[:'total_days']
      end

      if attributes.key?(:'total_hours')
        self.total_hours = attributes[:'total_hours']
      end

      if attributes.key?(:'total_milliseconds')
        self.total_milliseconds = attributes[:'total_milliseconds']
      end

      if attributes.key?(:'total_minutes')
        self.total_minutes = attributes[:'total_minutes']
      end

      if attributes.key?(:'total_seconds')
        self.total_seconds = attributes[:'total_seconds']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ticks == o.ticks &&
          days == o.days &&
          hours == o.hours &&
          milliseconds == o.milliseconds &&
          minutes == o.minutes &&
          seconds == o.seconds &&
          total_days == o.total_days &&
          total_hours == o.total_hours &&
          total_milliseconds == o.total_milliseconds &&
          total_minutes == o.total_minutes &&
          total_seconds == o.total_seconds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ticks, days, hours, milliseconds, minutes, seconds, total_days, total_hours, total_milliseconds, total_minutes, total_seconds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
