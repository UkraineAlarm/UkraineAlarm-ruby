=begin
#Ukraine Alert API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0
Contact: support@stfalcon.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.52
=end

module SwaggerClient
  class AlertsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Області, регіони та громади з тривогами
    # @param [Hash] opts the optional parameters
    # @return [Array<AlertRegionModel>]
    def api_v3_alerts_get(opts = {})
      data, _status_code, _headers = api_v3_alerts_get_with_http_info(opts)
      data
    end

    # Області, регіони та громади з тривогами
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AlertRegionModel>, Integer, Hash)>] Array<AlertRegionModel> data, response status code and response headers
    def api_v3_alerts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.api_v3_alerts_get ...'
      end
      # resource path
      local_var_path = '/api/v3/alerts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<AlertRegionModel>' 

      auth_names = opts[:auth_names] || ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#api_v3_alerts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Отримати останніх 25 тривог регіону
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region_id 
    # @return [Array<RegionAlarmsHistory>]
    def api_v3_alerts_region_history_get(opts = {})
      data, _status_code, _headers = api_v3_alerts_region_history_get_with_http_info(opts)
      data
    end

    # Отримати останніх 25 тривог регіону
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region_id 
    # @return [Array<(Array<RegionAlarmsHistory>, Integer, Hash)>] Array<RegionAlarmsHistory> data, response status code and response headers
    def api_v3_alerts_region_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.api_v3_alerts_region_history_get ...'
      end
      # resource path
      local_var_path = '/api/v3/alerts/regionHistory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'regionId'] = opts[:'region_id'] if !opts[:'region_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<RegionAlarmsHistory>' 

      auth_names = opts[:auth_names] || ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#api_v3_alerts_region_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Статус області/регіону/громади
    # @param region_id ID області/регіону/громади
    # @param [Hash] opts the optional parameters
    # @return [Array<AlertRegionModel>]
    def api_v3_alerts_region_id_get(region_id, opts = {})
      data, _status_code, _headers = api_v3_alerts_region_id_get_with_http_info(region_id, opts)
      data
    end

    # Статус області/регіону/громади
    # @param region_id ID області/регіону/громади
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AlertRegionModel>, Integer, Hash)>] Array<AlertRegionModel> data, response status code and response headers
    def api_v3_alerts_region_id_get_with_http_info(region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.api_v3_alerts_region_id_get ...'
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling AlertsApi.api_v3_alerts_region_id_get"
      end
      # resource path
      local_var_path = '/api/v3/alerts/{regionId}'.sub('{' + 'regionId' + '}', region_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<AlertRegionModel>' 

      auth_names = opts[:auth_names] || ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#api_v3_alerts_region_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
    # @param [Hash] opts the optional parameters
    # @return [AlertModification]
    def api_v3_alerts_status_get(opts = {})
      data, _status_code, _headers = api_v3_alerts_status_get_with_http_info(opts)
      data
    end

    # Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlertModification, Integer, Hash)>] AlertModification data, response status code and response headers
    def api_v3_alerts_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AlertsApi.api_v3_alerts_status_get ...'
      end
      # resource path
      local_var_path = '/api/v3/alerts/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AlertModification' 

      auth_names = opts[:auth_names] || ['Token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AlertsApi#api_v3_alerts_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
